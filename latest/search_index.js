var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = Kroki","category":"page"},{"location":"api/#Public","page":"API","title":"Public","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Kroki\nDiagram\nDiagram(::Symbol, ::AbstractString)\nDiagram(::Symbol; ::Union{Nothing,AbstractString}, ::Union{Nothing,AbstractString})\nSUPPORTED_TEXT_PLAIN_SHOW_MIME_TYPES\nTEXT_PLAIN_SHOW_MIME_TYPE\nrender","category":"page"},{"location":"api/#Kroki.Kroki","page":"API","title":"Kroki.Kroki","text":"The main Module containing the necessary types of functions for integration with a Kroki service.\n\nDefines Base.show and corresponding Base.showable methods for different output formats and Diagram types, so they render in their most optimal form in different environments (e.g. the documentation system, Documenter output, Pluto, Jupyter, etc.).\n\n\n\n\n\n","category":"module"},{"location":"api/#Kroki.Diagram","page":"API","title":"Kroki.Diagram","text":"struct Diagram\n\nA representation of a diagram that can be rendered by a Kroki service.\n\nExamples\n\njulia> Kroki.Diagram(:PlantUML, \"Kroki -> Julia: Hello Julia!\")\n     ┌─────┐          ┌─────┐\n     │Kroki│          │Julia│\n     └──┬──┘          └──┬──┘\n        │ Hello Julia!   │\n        │───────────────>│\n     ┌──┴──┐          ┌──┴──┐\n     │Kroki│          │Julia│\n     └─────┘          └─────┘\n\nFields\n\noptions::Dict{String, String}: Options to modify the appearance of the specification when rendered.\nValid options depend on the type of diagram. See Kroki's website for details.\nThe keys are case-insensitive. All specified options are passed through to Kroki, which ignores unkown options.\n\nspecification::AbstractString: The textual specification of the diagram.\ntype::Symbol: The type of diagram specification (e.g. ditaa, Mermaid, PlantUML, etc.). This value is case-insensitive.\n\n\n\n\n\n","category":"type"},{"location":"api/#Kroki.Diagram-Tuple{Symbol, AbstractString}","page":"API","title":"Kroki.Diagram","text":"Diagram(\n    type::Symbol,\n    specification::AbstractString;\n    kwargs...\n) -> Diagram\n\n\nConstructs a Diagram from the specification for a specific type of diagram.\n\nPasses keyword arguments through to Diagram untouched.\n\n\n\n\n\n","category":"method"},{"location":"api/#Kroki.Diagram-Tuple{Symbol}","page":"API","title":"Kroki.Diagram","text":"Diagram(type::Symbol; path, specification, kwargs...)\n\n\nConstructs a Diagram from the specification for a specific type of diagram, or loads the specification from the provided path.\n\nSpecifying both keyword arguments, or neither, is invalid.\n\nPasses any further keyword arguments through to Diagram untouched.\n\n\n\n\n\n","category":"method"},{"location":"api/#Kroki.SUPPORTED_TEXT_PLAIN_SHOW_MIME_TYPES","page":"API","title":"Kroki.SUPPORTED_TEXT_PLAIN_SHOW_MIME_TYPES","text":"The values that can be used to configure TEXT_PLAIN_SHOW_MIME_TYPE:\n\ntext/plain; charset=utf-8\ntext/plain\n\n\n\n\n\n","category":"constant"},{"location":"api/#Kroki.TEXT_PLAIN_SHOW_MIME_TYPE","page":"API","title":"Kroki.TEXT_PLAIN_SHOW_MIME_TYPE","text":"Defines the MIME type to be used when show gets called on a Diagram for the text/plain MIME type.\n\nShould be set to a variation of the text/plain MIME type. For instance, text/plain; charset=utf-8 to enable Unicode rendering for certain diagrams, e.g. PlantUML and Structurizr.\n\nOnly a select number of variations are supported, see LIMITED_DIAGRAM_SUPPORT and SUPPORTED_TEXT_PLAIN_SHOW_MIME_TYPES for details.\n\nDefaults to text/plain; charset=utf-8.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Kroki.render","page":"API","title":"Kroki.render","text":"render(\n    diagram::Diagram,\n    output_format::AbstractString;\n    options\n) -> Any\n\n\nRenders a Diagram through a Kroki service to the specified output format.\n\nAllows the specification of diagram options through the options keyword. The options default to those specified on the Diagram.\n\nIf the Kroki service responds with an error, throws an InvalidDiagramSpecificationError or InvalidOutputFormatError if a known type of error occurs. Other errors (e.g. HTTP.ExceptionRequest.StatusError for connection errors) are propagated if they occur.\n\nSVG output is supported for all Diagram types. See the support table for an overview of other supported output formats per diagram type.\n\n\n\n\n\n","category":"function"},{"location":"api/#Service-Management","page":"API","title":"Service Management","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [ Kroki.Service ]\nOrder = [ :module, :type, :function ]\nFilter = name -> \"$name\" !== \"executeDockerCompose\"","category":"page"},{"location":"api/#Kroki.Service","page":"API","title":"Kroki.Service","text":"Defines functions and constants managing the Kroki service the rest of the package uses to render diagrams. These services can be either local or remote.\n\nThis module also enables management of a local service instance, provided Docker and Docker Compose are available on the system.\n\nwarning: Removing service container images\nFunctions for removing container images that have been downloaded are not included. It will be necessary to manually clean up the container images retrieved by the service management functions.\n\nBy default, the functions managing locally running services will rely on the latest tag for the yuzutech/kroki container image. This typically means the most recently released version of Kroki will be used. In this mode, Kroki.Service.update! can be used to pull in the most recent version. A KROKI_CONTAINER_IMAGE_TAG environment variable can be configured, prior to invoking Kroki.Service.start!, to start the services corresponding to a specific version of Kroki. It is important the variable matches an existing tag for the container image.\n\nwarning: Changing Kroki versions\nChanging the KROKI_CONTAINER_IMAGE_TAG environment variable after calling Kroki.Service.start! may result in manual cleanup of containers being necessary as the service management functions will not keep track of which versions of services were previously started.\n\n\n\n\n\n","category":"module"},{"location":"api/#Kroki.Service.DockerComposeExecutionError","page":"API","title":"Kroki.Service.DockerComposeExecutionError","text":"struct DockerComposeExecutionError <: Exception\n\nA specialized Exception to include reporting instructions for specific types of errors that may occur while trying to execute docker-compose.\n\nFields\n\nmessage::String\n\n\n\n\n\n","category":"type"},{"location":"api/#Kroki.Service.info-Tuple{}","page":"API","title":"Kroki.Service.info","text":"info() -> Markdown.MD\n\n\nProvides an overview of the (versions of) tools supporting the different diagram types based on information provided by the service as configured through setEndpoint!.\n\nExample\n\njulia> Kroki.Service.info()\n\n\n\n\n\n","category":"method"},{"location":"api/#Kroki.Service.setEndpoint!","page":"API","title":"Kroki.Service.setEndpoint!","text":"setEndpoint!() -> String\nsetEndpoint!(endpoint::AbstractString) -> Any\n\n\nSets the ENDPOINT using a fallback mechanism if no endpoint is provided.\n\nThe fallback mechanism checks for a KROKI_ENDPOINT environment variable specifying an endpoint (e.g. to be used across Julia instances). If this environment variable is also not present the DEFAULT_ENDPOINT is used.\n\nThis can, for instance, be used in cases where a privately hosted instance is available or when a local service has been start!ed.\n\nReturns the value that ENDPOINT got set to.\n\nExamples\n\nsetEndpoint!()\nsetEndpoint!(\"http://localhost:8000\")\n\n\n\n\n\n","category":"function"},{"location":"api/#Kroki.Service.start!","page":"API","title":"Kroki.Service.start!","text":"start!()\nstart!(update_endpoint::Bool)\n\n\nStarts the Kroki service components on the local system, optionally, ensuring ENDPOINT points to them.\n\nPass false to the function to prevent the ENDPOINT from being updated. The default behavior is to update.\n\n\n\n\n\n","category":"function"},{"location":"api/#Kroki.Service.status-Tuple{}","page":"API","title":"Kroki.Service.status","text":"status() -> Any\n\n\nReturns a NamedTuple where the keys are the names of the service components and the values their corresponding 'running' state.\n\nExamples\n\njulia> status()\n(core = true, mermaid = false)\n\n\n\n\n\n","category":"method"},{"location":"api/#Kroki.Service.stop!","page":"API","title":"Kroki.Service.stop!","text":"stop!()\nstop!(perform_cleanup::Bool)\n\n\nStops any running Kroki service components ensuring ENDPOINT no longer points to the stopped service.\n\nCleans up left-over containers by default. This behavior can be turned off by passing false to the function.\n\n\n\n\n\n","category":"function"},{"location":"api/#Kroki.Service.update!-Tuple{}","page":"API","title":"Kroki.Service.update!","text":"update!()\n\n\nUpdates the Docker images for the individual Kroki service components.\n\n\n\n\n\n","category":"method"},{"location":"api/#api-string-literals","page":"API","title":"String Literals","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"The following string literals are exported from the Kroki module to make it more straightforward to instantiate Diagrams.","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [ Kroki.StringLiterals ]\nOrder = [ :module, :macro ]","category":"page"},{"location":"api/#Kroki.StringLiterals","page":"API","title":"Kroki.StringLiterals","text":"Defines string literals for all supported Diagram types, making it more straightforward to write diagrams inline.\n\nExports\n\n@actdiag_str\n@blockdiag_str\n@bpmn_str\n@bytefield_str\n@c4plantuml_str\n@d2_str\n@dbml_str\n@diagramsnet_str\n@ditaa_str\n@erd_str\n@excalidraw_str\n@graphviz_str\n@mermaid_str\n@nomnoml_str\n@nwdiag_str\n@packetdiag_str\n@pikchr_str\n@plantuml_str\n@rackdiag_str\n@seqdiag_str\n@structurizr_str\n@svgbob_str\n@symbolator_str\n@tikz_str\n@umlet_str\n@vega_str\n@vegalite_str\n@wavedrom_str\n@wireviz_str\n\nImports\n\nBase\nCore\nDocStringExtensions\nKroki.Documentation\n\n\n\n\n\n","category":"module"},{"location":"api/#Kroki.StringLiterals.@actdiag_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@actdiag_str","text":"String literal for instantiating actdiag Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@blockdiag_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@blockdiag_str","text":"String literal for instantiating blockdiag Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@bpmn_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@bpmn_str","text":"String literal for instantiating BPMN Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@bytefield_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@bytefield_str","text":"String literal for instantiating Byte Field Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@c4plantuml_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@c4plantuml_str","text":"String literal for instantiating C4 with PlantUML Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@d2_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@d2_str","text":"String literal for instantiating D2 Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@dbml_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@dbml_str","text":"String literal for instantiating DBML Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@diagramsnet_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@diagramsnet_str","text":"String literal for instantiating diagrams.net Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@ditaa_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@ditaa_str","text":"String literal for instantiating ditaa Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@erd_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@erd_str","text":"String literal for instantiating erd Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@excalidraw_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@excalidraw_str","text":"String literal for instantiating Excalidraw Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@graphviz_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@graphviz_str","text":"String literal for instantiating Graphviz Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@mermaid_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@mermaid_str","text":"String literal for instantiating Mermaid Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@nomnoml_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@nomnoml_str","text":"String literal for instantiating nomnoml Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@nwdiag_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@nwdiag_str","text":"String literal for instantiating nwdiag Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@packetdiag_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@packetdiag_str","text":"String literal for instantiating packetdiag Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@pikchr_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@pikchr_str","text":"String literal for instantiating Pikchr Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@plantuml_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@plantuml_str","text":"String literal for instantiating PlantUML Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@rackdiag_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@rackdiag_str","text":"String literal for instantiating rackdiag Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@seqdiag_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@seqdiag_str","text":"String literal for instantiating seqdiag Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@structurizr_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@structurizr_str","text":"String literal for instantiating Structurizr Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@svgbob_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@svgbob_str","text":"String literal for instantiating Svgbob Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@symbolator_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@symbolator_str","text":"String literal for instantiating Symbolator Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@tikz_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@tikz_str","text":"String literal for instantiating TikZ/PGF Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@umlet_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@umlet_str","text":"String literal for instantiating UMLet Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@vega_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@vega_str","text":"String literal for instantiating Vega Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@vegalite_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@vegalite_str","text":"String literal for instantiating Vega-Lite Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@wavedrom_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@wavedrom_str","text":"String literal for instantiating WaveDrom Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Kroki.StringLiterals.@wireviz_str-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.@wireviz_str","text":"String literal for instantiating WireViz Diagrams.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Private","page":"API","title":"Private","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"DiagramTypeMetadata\nDIAGRAM_TYPE_METADATA\nLIMITED_DIAGRAM_SUPPORT\nMIME_TO_RENDER_ARGUMENT_MAP\nUriSafeBase64Payload\ngetDiagramTypeMetadata","category":"page"},{"location":"api/#Kroki.DiagramTypeMetadata","page":"API","title":"Kroki.DiagramTypeMetadata","text":"struct DiagramTypeMetadata\n\nA container to associate metadata with a specific diagram type, e.g. for documentation purposes.\n\nFields\n\nname::String: A more readable name for the diagram type, if applicable.\nurl::String: The URL to the website/documentation of the diagram type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Kroki.DIAGRAM_TYPE_METADATA","page":"API","title":"Kroki.DIAGRAM_TYPE_METADATA","text":"An overview of metadata for the different Diagram types that can be rendered, e.g. links to the main documentation, friendly names, etc.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Kroki.LIMITED_DIAGRAM_SUPPORT","page":"API","title":"Kroki.LIMITED_DIAGRAM_SUPPORT","text":"Some MIME types are not supported by all diagram types, this constant contains all these limitations. The union of all values corresponds to all supported Diagram types.\n\nNote that SVG output is supported by all diagram types, as is reflected in the support matrix below. Only those diagram types that explicitly only support SVG output are included in this constant.\n\nThose diagram types that support plain text output, i.e. not just rendering their specification, support both ASCII and Unicode character sets for rendering. This is expressed using two different text/plain MIME types. See also SUPPORTED_TEXT_PLAIN_SHOW_MIME_TYPES.\n\nSupport Matrix\n\n application/pdf image/jpeg image/png image/svg+xml text/plain text/plain; charset=utf-8\nactdiag ✅  ✅ ✅  \nblockdiag ✅  ✅ ✅  \nBPMN    ✅  \nByte Field    ✅  \nC4 with PlantUML ✅  ✅ ✅ ✅ ✅\nD2    ✅  \nDBML    ✅  \ndiagrams.net   ✅ ✅  \nditaa   ✅ ✅  \nerd ✅ ✅ ✅ ✅  \nExcalidraw    ✅  \nGraphviz ✅ ✅ ✅ ✅  \nMermaid   ✅ ✅  \nnomnoml    ✅  \nnwdiag ✅  ✅ ✅  \npacketdiag ✅  ✅ ✅  \nPikchr    ✅  \nPlantUML ✅  ✅ ✅ ✅ ✅\nrackdiag ✅  ✅ ✅  \nseqdiag ✅  ✅ ✅  \nStructurizr ✅  ✅ ✅ ✅ ✅\nSvgbob    ✅  \nSymbolator   ✅ ✅  \nTikZ/PGF ✅ ✅ ✅ ✅  \nUMLet  ✅ ✅ ✅  \nVega ✅  ✅ ✅  \nVega-Lite ✅  ✅ ✅  \nWaveDrom    ✅  \nWireViz   ✅ ✅  \n\n\n\n\n\n","category":"constant"},{"location":"api/#Kroki.MIME_TO_RENDER_ARGUMENT_MAP","page":"API","title":"Kroki.MIME_TO_RENDER_ARGUMENT_MAP","text":"Maps MIME types to the arguments that have to be passed to the render function, which are in turned passed to the Kroki service.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Kroki.UriSafeBase64Payload","page":"API","title":"Kroki.UriSafeBase64Payload","text":"UriSafeBase64Payload(diagram::Diagram) -> String\n\n\nCompresses a Diagram's specification using zlib, turning the resulting bytes into a URL-safe Base64 encoded payload (i.e. replacing + by - and / by _) to be used in communication with a Kroki service.\n\nSee the Kroki documentation for more information.\n\n\n\n\n\n","category":"function"},{"location":"api/#Kroki.getDiagramTypeMetadata","page":"API","title":"Kroki.getDiagramTypeMetadata","text":"getDiagramTypeMetadata(\n    diagram_type::Symbol\n) -> Kroki.DiagramTypeMetadata\n\n\nRetrieves the metadata for a given diagram_type from DIAGRAM_TYPE_METADATA, with a fallback to a generic DiagramTypeMetadata.\n\n\n\n\n\n","category":"function"},{"location":"api/#Documentation","page":"API","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [ Kroki.Documentation ]","category":"page"},{"location":"api/#Kroki.Documentation","page":"API","title":"Kroki.Documentation","text":"Contains templates and a helper macro @setupDocstringMarkup to easily set up consistent docstring formats across modules.\n\n\n\n\n\n","category":"module"},{"location":"api/#Kroki.Documentation.@setupDocstringMarkup-Tuple{}","page":"API","title":"Kroki.Documentation.@setupDocstringMarkup","text":"Helper macro ensuring consistent docstring markup across modules through templating.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Exceptions","page":"API","title":"Exceptions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [ Kroki.Exceptions ]","category":"page"},{"location":"api/#Kroki.Exceptions","page":"API","title":"Kroki.Exceptions","text":"Defines all custom Exceptions that can be thrown by different parts of the package along with their corresponding Base.showerror overloads.\n\nExports\n\nImports\n\nBase\nCore\nDocStringExtensions\nKroki.Documentation\n\n\n\n\n\n","category":"module"},{"location":"api/#Kroki.Exceptions.DiagramPathOrSpecificationError","page":"API","title":"Kroki.Exceptions.DiagramPathOrSpecificationError","text":"struct DiagramPathOrSpecificationError <: Exception\n\nAn Exception to be thrown when the path and specification keyword arguments to Diagram are not specified mutually exclusive.\n\nFields\n\npath::Union{Nothing, AbstractString}: The path keyword argument passed to the Diagram.\nspecification::Union{Nothing, AbstractString}: The specification keyword argument passed to the Diagram.\n\n\n\n\n\n","category":"type"},{"location":"api/#Kroki.Exceptions.InfoRetrievalError","page":"API","title":"Kroki.Exceptions.InfoRetrievalError","text":"struct InfoRetrievalError <: Exception\n\nAn Exception to be thrown when Kroki.Service.info cannot retrieve its information from the Kroki service configured through Kroki.Service.setEndpoint!.\n\nFields\n\nendpoint::String: The endpoint that was queried for information about a Kroki service.\n\n\n\n\n\n","category":"type"},{"location":"api/#Kroki.Exceptions.InvalidDiagramSpecificationError","page":"API","title":"Kroki.Exceptions.InvalidDiagramSpecificationError","text":"struct InvalidDiagramSpecificationError <: Exception\n\nAn Exception to be thrown when a Diagram representing an invalid specification is passed to render.\n\nFields\n\nerror::String: The error message returned by the Kroki service causing the exception to be thrown.\n\ncause::Diagram: The Diagram that caused the error.\n\n\n\n\n\n","category":"type"},{"location":"api/#Kroki.Exceptions.InvalidOutputFormatError","page":"API","title":"Kroki.Exceptions.InvalidOutputFormatError","text":"struct InvalidOutputFormatError <: Exception\n\nAn Exception to be thrown when a Diagram is rendered to an unsupported or invalid output format.\n\nFields\n\nerror::String: The error message returned by the Kroki service causing the exception to be thrown.\n\ncause::Diagram: The Diagram that caused the error.\n\n\n\n\n\n","category":"type"},{"location":"api/#Kroki.Exceptions.UnsupportedMIMETypeError","page":"API","title":"Kroki.Exceptions.UnsupportedMIMETypeError","text":"struct UnsupportedMIMETypeError <: Exception\n\nAn Exception to be thrown when the selected_mime_type is not an element of the set of supported_mime_types.\n\nFields\n\nselected_mime_type::MIME: The selected MIME type that is not supported.\nsupported_mime_types::Set{MIME}: The set of supported MIME types.\n\n\n\n\n\n","category":"type"},{"location":"api/#Service-Management-2","page":"API","title":"Service Management","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [ Kroki.Service ]\nOrder = [ :constant ]","category":"page"},{"location":"api/#Kroki.Service.DEFAULT_ENDPOINT","page":"API","title":"Kroki.Service.DEFAULT_ENDPOINT","text":"The default ENDPOINT to use, i.e. the publicly hosted version.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Kroki.Service.ENDPOINT","page":"API","title":"Kroki.Service.ENDPOINT","text":"The currently active Kroki service endpoint being used.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Kroki.Service.SERVICE_DEFINITION_FILE","page":"API","title":"Kroki.Service.SERVICE_DEFINITION_FILE","text":"Path to the Docker Compose definitions for running a local Kroki service.\n\n\n\n\n\n","category":"constant"},{"location":"api/","page":"API","title":"API","text":"Kroki.Service.executeDockerCompose","category":"page"},{"location":"api/#Kroki.Service.executeDockerCompose","page":"API","title":"Kroki.Service.executeDockerCompose","text":"executeDockerCompose(cmd::Vector{String}) -> String\n\n\nHelper function for executing Docker Compose commands.\n\nReturns captured stdout.\n\nThrows an ErrorException if Docker and/or Docker Compose aren't available. Throws a DockerComposeExecutionError if any other exception occurs during execution.\n\n\n\n\n\n","category":"function"},{"location":"api/#String-Literals","page":"API","title":"String Literals","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [ Kroki.StringLiterals ]\nOrder = [ :function ]","category":"page"},{"location":"api/#Kroki.StringLiterals.interpolate-Tuple{AbstractString}","page":"API","title":"Kroki.StringLiterals.interpolate","text":"interpolate(specification::AbstractString) -> Vector{Expr}\n\n\nHelper function implementing string interpolation to be used in conjunction with macros defining diagram specification string literals, as they do not support string interpolation by default.\n\nReturns an array of elements, e.g. Expressions, Symbols, Strings that can be incorporated in the args of another Expression.\n\n\n\n\n\n","category":"method"},{"location":"api/#Kroki.StringLiterals.shouldInterpolate-Tuple{IO}","page":"API","title":"Kroki.StringLiterals.shouldInterpolate","text":"shouldInterpolate(stream::IO) -> Bool\n\n\nWhen called at the start of an expression to interpolate, checks whether the interpolation sign that triggered interpolation was escaped or not. This takes into account multiple escaped escape characters in front of an interpolation sign.\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This page shows the different ways diagrams can be rendered. Most content for the examples is taken from Kroki's website, or the individual diagramming tools websites as linked from the docstring of various string literals.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Kroki","category":"page"},{"location":"examples/#String-literals","page":"Examples","title":"String literals","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The most straightforward way to create diagrams is to rely on the string literals for each of the available diagram types. The package needs to be updated to add string literals whenever the Kroki service adds a new diagramming tool. In case a string literal is not available, it will be necessary to resort to using the Diagram type directly.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"ditaa\"\"\"\n      +--------+\n      |        |\n      | Julia  |\n      |        |\n      +--------+\n          ^\n  request |\n          v\n  +-------------+\n  |             |\n  |    Kroki    |\n  |             |---+\n  +-------------+   |\n       ^  ^         | inflate\n       |  |         |\n       v  +---------+\n  +-------------+\n  |             |\n  |    Ditaa    |\n  |             |----+\n  +-------------+    |\n             ^       | process\n             |       |\n             +-------+\n\"\"\"","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"blockdiag\"\"\"\nblockdiag {\n  Kroki -> generates -> \"Block diagrams\";\n  Kroki -> is -> \"very easy!\";\n\n  Kroki [color = \"greenyellow\"];\n  \"Block diagrams\" [color = \"pink\"];\n  \"very easy!\" [color = \"orange\"];\n}\n\"\"\"","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"svgbob\"\"\"\n        ▲\n    Uin ┊   .------------------------\n        ┊   |\n        ┊   |\n        *---'┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄▶\n\"\"\"","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"note: String Interpolation\nString interpolation for string literals is not readily supported by Julia, requiring custom logic by the package providing them. Kroki.jl's string literals support string interpolation. Please file an issue when encountering unexpected behavior.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"alice = \"Kroki\"\nbob = \"Julia\"\n\nplantuml\"\"\"\n$alice -> $bob: I'm here to help.\n$bob -> $alice: With what?\n$alice -> $bob: Rendering diagrams!\n\"\"\"","category":"page"},{"location":"examples/#examples-diagram-type","page":"Examples","title":"The Diagram type","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"String literals are effectively short-hands for instantiating a Diagram for a specific type of diagram. In certain cases, it may be more straightforward, or even necessary, to directly instantiate a Diagram. For instance, when a type of diagram is supported by the Kroki service but support for it has not been added to this package. In those cases, basic functionality like rendering to an SVG should typically still work in line with the following examples.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Diagram(:mermaid, \"\"\"\ngraph TD\n  A[ Anyone ] --> | Can help | B( Go to github.com/yuzutech/kroki )\n  B --> C{ How to contribute? }\n  C --> D[ Reporting bugs ]\n  C --> E[ Sharing ideas ]\n  C --> F[ Advocating ]\n\"\"\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"warning: Escaping special characters\nWhen the diagram description contains special characters, e.g. \\s, keep in mind that these need to be escaped for proper handling when instantiating a Diagram.Escaping is not typically necessary when using string literals.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Diagram(:svgbob, \"\"\"\n    0       3                          P *\n     *-------*      +y                    \\\\\n  1 /|    2 /|       ^                     \\\\\n   *-+-----* |       |                v0    \\\\       v3\n   | |4    | |7      | ◄╮               *----\\\\-----*\n   | *-----|-*     ⤹ +-----> +x        /      v X   \\\\\n   |/      |/       / ⤴               /        o     \\\\\n   *-------*       v                 /                \\\\\n  5       6      +z              v1 *------------------* v2\n\"\"\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"svgbob\"\"\"\n    0       3                          P *\n     *-------*      +y                    \\\n  1 /|    2 /|       ^                     \\\n   *-+-----* |       |                v0    \\       v3\n   | |4    | |7      | ◄╮               *----\\-----*\n   | *-----|-*     ⤹ +-----> +x        /      v X   \\\n   |/      |/       / ⤴               /        o     \\\n   *-------*       v                 /                \\\n  5       6      +z              v1 *------------------* v2\n\"\"\"","category":"page"},{"location":"examples/#Loading-from-a-file","page":"Examples","title":"Loading from a file","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Instead of directly specifying a diagram, Diagrams can also load the specifications from files. This is particularly useful when creating diagrams using other tooling, e.g. Structurizr or Excalidraw, or when sharing diagram definitions across documentation.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"To load a diagram from a file, specify the path of the file as the path keyword argument to Diagram.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Diagram(\n  :structurizr;\n  path = joinpath(@__DIR__, \"..\", \"architecture\", \"workspace.dsl\"),\n)","category":"page"},{"location":"examples/#Diagram-options","page":"Examples","title":"Diagram options","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Some diagram types support diagram options controlling their apearance. These options can be set when instantiating a Diagram.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For instance, the workspace.dsl file referenced in the previous section defines multiple diagrams. The diagram that is rendered in the previous section is picked randomly from this set every time the documentation is generated. The Structurizr diagrams support a view-key option to indicate which diagram should be rendered from the set defined in the file.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"structurizr_diagram = Diagram(\n  :structurizr;\n  path = joinpath(@__DIR__, \"..\", \"architecture\", \"workspace.dsl\"),\n  options = Dict(\"view-key\" => \"ServiceContainers\")\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Another use case is specifying a theme for PlantUML diagrams.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Diagram(:plantuml, \"Kroki -> Julia: Hello\"; options = Dict(\"theme\" => \"amiga\"))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Diagram(:plantuml, \"Julia -> Kroki: Hello!\"; options = Dict(\"theme\" => \"crt-amber\"))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Instead of specifying diagram options at Diagram construction, they can also be passed directly to the render function. For instance, to select a different diagram from the set of Structurizr diagrams previously loaded from file.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# A helper struct to show the result of `render` within `Documenter`\nstruct DocumenterSvg\n  svg::Vector{UInt8}\nend\nfunction Base.show(io::IO, ::MIME\"image/svg+xml\", (; svg)::DocumenterSvg)\n  write(io, svg)\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# A helper wrapper to ensure the output of `render` can be visualized directly\n# within `Documenter`\nDocumenterSvg(\n  render(\n    structurizr_diagram, \"svg\";\n    options = Dict(\"view-key\" => \"PackageComponents\")\n  )\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"info: A note on `view-key`s\nThe view-keys for Structurizr diagrams can either be dynamic and obtained from the Structurizr (Lite) software, or they can be specified as the second argument to 'view definitions' using the Structurizr DSL.","category":"page"},{"location":"examples/#Rendering-to-a-specific-format","page":"Examples","title":"Rendering to a specific format","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"To render to a specific format, explicitly call the render function on a Diagram, specifying the desired output format.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"warning: Output format support\nAll diagram types support SVG output, other supported output formats vary per diagram type. See the support table for an overview.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"mermaid_diagram = mermaid\"\"\"\ngraph LR\n  Foo --> Bar\n  Bar --> Baz\n  Bar --> Bar\n  Baz --> Quuz\n  Quuz --> Foo\n  Quuz --> Bar\n\"\"\"\n\nmermaid_diagram_as_png = render(mermaid_diagram, \"png\")\n\n# The PNG header\n# See http://www.libpng.org/pub/png/spec/1.2/PNG-Rationale.html#R.PNG-file-signature\nChar.(mermaid_diagram_as_png[1:8])","category":"page"},{"location":"examples/#Saving-to-a-file","page":"Examples","title":"Saving to a file","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Once a diagram has been rendered, it's straightforward to write it to a file using write.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"write(\"mermaid_diagram.png\", mermaid_diagram_as_png)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: Mermaid diagram as PNG example)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note the difference in file size and fonts when rendering to SVG.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"write(\"mermaid_diagram.svg\", render(mermaid_diagram, \"svg\"))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: Mermaid diagram as SVG example)","category":"page"},{"location":"examples/#Controlling-text-rendering","page":"Examples","title":"Controlling text rendering","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Some diagrams support rendering to text, e.g. PlantUML and Structurizr. This can be based on ASCII or Unicode character sets. Which character set is used, is controlled using the Kroki.TEXT_PLAIN_SHOW_MIME_TYPE variable.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Setting a text/plain MIME type results in the use of the limited ASCII character set.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"text_plain_show_mime_type_backup = Kroki.TEXT_PLAIN_SHOW_MIME_TYPE[]","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"plantuml_diagram = plantuml\"\"\"\nKroki -> Documenter: I can render this as text in two ways!\nKroki <- Documenter: Nice!\n\"\"\"\n\nKroki.TEXT_PLAIN_SHOW_MIME_TYPE[] = MIME\"text/plain\"()\nprintln(sprint(show, MIME\"text/plain\"(), plantuml_diagram))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Setting a text/plain; charset=utf-8 MIME type, which is the default, results in nicer looking diagrams due to the use of Unicode characters.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Kroki.TEXT_PLAIN_SHOW_MIME_TYPE[] = MIME\"text/plain; charset=utf-8\"()\nprintln(sprint(show, MIME\"text/plain\"(), plantuml_diagram))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Configuring an invalid MIME type results in an error upon rendering to a text/plain target.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Kroki.TEXT_PLAIN_SHOW_MIME_TYPE[] = MIME\"not-a-known/mime-type\"()\n\ntry\n  sprint(show, MIME\"text/plain\"(), plantuml_diagram)\ncatch exception\n  println(sprint(showerror, exception))\nend","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Kroki.TEXT_PLAIN_SHOW_MIME_TYPE[] = text_plain_show_mime_type_backup","category":"page"},{"location":"#Kroki.jl","page":"Home","title":"Kroki.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Enables a wide array of textual diagramming tools, such as Graphviz, Mermaid, PlantUML, svgbob and many more within Julia through the Kroki service.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Kroki REPL Demo)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The aim of the package is to make it straightforward to store descriptive diagrams close to, or even within, code. Additionally, it supports progressive enhancement of these diagrams in environments, e.g. Documenter.jl, Pluto.jl, or Jupyter, that support richer media types such as SVG or JPEG.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Kroki Pluto Demo)","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the poster presented at JuliaCon 2020's poster session for more information and background.","category":"page"},{"location":"#Installation-and-Usage","page":"Home","title":"Installation & Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install the package through Julia's package manager","category":"page"},{"location":"","page":"Home","title":"Home","text":"(v1.10) pkg> add Kroki","category":"page"},{"location":"","page":"Home","title":"Home","text":"Construct diagrams using the Diagram type or any of the available string literals. Then either rely on the available Base.show overloads, or call the render function with a specific output format, to visualize them.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Kroki","category":"page"},{"location":"","page":"Home","title":"Home","text":"plantuml\"\"\"\nKroki -> Julia: Hello!\nJulia -> Kroki: Hi!\nKroki -> Julia: Can I draw some diagrams for you?\nJulia -> Kroki: Sure!\n\"\"\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the examples section for more details and, well, examples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Getting Help\nFor feature requests and bug reports related to this Julia package use the Issue tracker on GitHub.To get help regarding Kroki itself, e.g. for operational issues with the publicly hosted Kroki server, requests for adding support for additional diagram types, etc. please refer to the Getting Help section of the Kroki documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package can be configured to use the publicly hosted server at https://kroki.io or a self-hosted instance, see setEndpoint! for details. Facilities, e.g. start!, status, stop!, etc. are included to help with the self-hosting scenario, provided Docker Compose is available.","category":"page"},{"location":"","page":"Home","title":"Home","text":"tip: Kroki and Continuous Integration (CI)\nRunning a dedicated Kroki instance in CI environments can help ensure more reliable builds, e.g. when building documentation with integrated diagrams, etc. There are multiple ways of achieving this, increasing in difficulty/maintenance burden.The service management functions mentioned above are the most straightforward way to get a local version of Kroki running. Public GitHub Actions runners have all the necessary tools supporting these functions readily installed. Hence, a call to Kroki.Service.start! is all that is necessary to run a local Kroki service on GitHub Actions. For instance from the make.jl script typically used for documentation generation. Other CI environments, such as GitLab CI, Travis, private GitHub Actions runners, etc. may require separate installation of Docker and/or Docker Compose.Alternatively, the Docker Compose definitions can be leveraged in combination with an action such as isbang/compose-action to launch the necessary services.It is also possible to use functionality such as service containers. It is important to take into account such an approach will require duplication of much of the configuration readily provided by the solutions mentioned above. Refer to Kroki's documentation for more information on the necessary container images.In the last two cases it is important to remember to correctly configure the endpoint for the package using Kroki.Service.setEndpoint!. In the first case this will be handled automatically, provided the services are started within the same Julia session as where the diagrams are rendered.","category":"page"},{"location":"#diagram-support","page":"Home","title":"Supported Diagram Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The table below provides an overview of the different diagram types this package supports, with links to their documentation, and the output formats they can be rendered to.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Kroki, Markdown\nMarkdown.parse(Kroki.renderDiagramSupportAsMarkdown(Kroki.LIMITED_DIAGRAM_SUPPORT))","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Addressing errors in diagram type support\nThe information in this table should correspond to the one on Kroki's website, but is directly derived from the support as it is encoded in this package.Given that this information is a mirror of the information available on Kroki's website, it may not be entirely accurate with regards to actually supported output formats. Support for output formats needs to be addressed within the Kroki service and then mirrored into this package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Kroki.Service.info function can be used to obtain more detailed information about the versions of the tools used to support the different diagram types.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [ \"api.md\" ]","category":"page"}]
}
